/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { Group, Mesh } from "three";
import { ThreeEvent } from "@react-three/fiber";
import {
  keyToNote,
  Note,
  noteToMesh,
  noteToOctaveIndex,
  sounds,
} from "./pianoKeys";

import { getSongData, getSongs, playSong } from "midi/midiParser";
import { useAppStore } from "store/store";

const KEY_ROTATION_VALUE = Math.PI / 64;

type GLTFResult = GLTF & {
  nodes: {
    Key1001: THREE.Mesh;
    Key2001: THREE.Mesh;
    Key3001: THREE.Mesh;
    Key4001: THREE.Mesh;
    Key5001: THREE.Mesh;
    Key6001: THREE.Mesh;
    Key7001: THREE.Mesh;
    KeyBlack1001: THREE.Mesh;
    KeyBlack2001: THREE.Mesh;
    KeyBlack3001: THREE.Mesh;
    KeyBlack4001: THREE.Mesh;
    KeyBlack5001: THREE.Mesh;
    Key1003: THREE.Mesh;
    Key2003: THREE.Mesh;
    Key3003: THREE.Mesh;
    Key4003: THREE.Mesh;
    Key5003: THREE.Mesh;
    Key6003: THREE.Mesh;
    Key7003: THREE.Mesh;
    KeyBlack1003: THREE.Mesh;
    KeyBlack2003: THREE.Mesh;
    KeyBlack3003: THREE.Mesh;
    KeyBlack4003: THREE.Mesh;
    KeyBlack5003: THREE.Mesh;
    Key1002: THREE.Mesh;
    Key2002: THREE.Mesh;
    Key3002: THREE.Mesh;
    Key4002: THREE.Mesh;
    Key5002: THREE.Mesh;
    Key6002: THREE.Mesh;
    Key7002: THREE.Mesh;
    KeyBlack1002: THREE.Mesh;
    KeyBlack2002: THREE.Mesh;
    KeyBlack3002: THREE.Mesh;
    KeyBlack4002: THREE.Mesh;
    KeyBlack5002: THREE.Mesh;
    Key1004: THREE.Mesh;
    Key2004: THREE.Mesh;
    Key3004: THREE.Mesh;
    Key4004: THREE.Mesh;
    Key5004: THREE.Mesh;
    Key6004: THREE.Mesh;
    Key7004: THREE.Mesh;
    KeyBlack1004: THREE.Mesh;
    KeyBlack2004: THREE.Mesh;
    KeyBlack3004: THREE.Mesh;
    KeyBlack4004: THREE.Mesh;
    KeyBlack5004: THREE.Mesh;
    Key1005: THREE.Mesh;
    Key2005: THREE.Mesh;
    Key3005: THREE.Mesh;
    Key4005: THREE.Mesh;
    Key5005: THREE.Mesh;
    Key6005: THREE.Mesh;
    Key7005: THREE.Mesh;
    KeyBlack1005: THREE.Mesh;
    KeyBlack2005: THREE.Mesh;
    KeyBlack3005: THREE.Mesh;
    KeyBlack4005: THREE.Mesh;
    KeyBlack5005: THREE.Mesh;
    Logo: THREE.Mesh;
    BackPanel: THREE.Mesh;
    LeftPanel: THREE.Mesh;
    RightPanel: THREE.Mesh;
    Floor: THREE.Mesh;
    Holder: THREE.Mesh;
    HolderHelp1: THREE.Mesh;
    HolderHelp2: THREE.Mesh;
    HolderHelp3: THREE.Mesh;
  };
  materials: {
    ["White Key"]: THREE.MeshStandardMaterial;
    ["Black key"]: THREE.MeshPhysicalMaterial;
    GoldShiny: THREE.MeshPhysicalMaterial;
    ["Back panel"]: THREE.MeshPhysicalMaterial;
    Gold: THREE.MeshPhysicalMaterial;
  };
};

type PressedKey = {
  mesh: Mesh;
  soundId: number;
};

const PianoModel = (props: JSX.IntrinsicElements["group"]) => {
  const { nodes, materials } = useGLTF("/piano.glb") as GLTFResult;

  const pressedKeys = useRef<Map<Note, PressedKey>>(new Map());
  const pointerKeyPressed = useRef<Note | null>(null);
  const allKeysRef = useRef<Group | null>(null);
  const songIntervalTimer = useRef<NodeJS.Timer | null>(null);

  const { keysPressed } = useAppStore();

  const playKey = (key: Note, mesh: Mesh) => {
    console.log(key);
    mesh.rotateZ(KEY_ROTATION_VALUE * -1);
    const sound = sounds.get(key);
    if (!sound) return;
    const soundId = sound.play();
    pressedKeys.current.set(key, { mesh, soundId });
  };

  const stopKey = (key: Note, mesh: Mesh) => {
    const soundId = pressedKeys.current.get(key)?.soundId;
    pressedKeys.current.delete(key);
    mesh.rotateZ(KEY_ROTATION_VALUE);
    const sound = sounds.get(key);
    if (!sound) return;
    sound.fade(1, 0, 250, soundId);
    sound.once("fade", () => sound.stop(soundId), soundId);
  };

  const handlePointerDown = (e: ThreeEvent<PointerEvent>, key: Note) => {
    e.stopPropagation();
    playKey(key, e.object as Mesh);
    pointerKeyPressed.current = key;
  };

  // handle pointer pressed
  useEffect(() => {
    const pointerUp = () => {
      const pointerKey = pointerKeyPressed.current;
      if (!pointerKey) return;
      const mesh = pressedKeys.current.get(pointerKey);
      if (!mesh) return;
      stopKey(pointerKey, mesh.mesh);
    };

    window.addEventListener("pointerup", pointerUp);
    return () => {
      window.removeEventListener("pointerup", pointerUp);
    };
  }, []);

  // handle keyboard pressed
  useEffect(() => {
    const keyDown = (e: KeyboardEvent) => {
      if (keysPressed.get(e.key)) return;
      const note = keyToNote.get(e.key) as Note;
      if (!note) return;
      const mesh = noteToMesh(note, allKeysRef);
      if (!mesh) return;
      keysPressed.set(e.key, true);
      playKey(note, mesh);
    };
    const keyUp = (e: KeyboardEvent) => {
      const note = keyToNote.get(e.key) as Note;
      if (!note) return;
      const mesh = pressedKeys.current.get(note);
      if (!mesh) return;
      keysPressed.delete(e.key);
      stopKey(note, mesh.mesh);
    };
    window.addEventListener("keydown", keyDown);
    window.addEventListener("keyup", keyUp);

    return () => {
      window.removeEventListener("keydown", keyDown);
      window.removeEventListener("keyup", keyUp);
    };
  }, [keysPressed]);

  // stop all keys when tab looses focus
  useEffect(() => {
    const windowFocusLost = () => {
      const allPressedKeys = pressedKeys.current.keys();
      keysPressed.clear();
      if (!allPressedKeys) return;
      Array.from(allPressedKeys).forEach((key) => {
        const mesh = pressedKeys.current.get(key);
        if (!mesh) return;
        stopKey(key, mesh.mesh);
      });
      const evt = new PointerEvent("pointerup");
      window.dispatchEvent(evt);
    };

    window.addEventListener("blur", windowFocusLost);
    return () => {
      window.removeEventListener("blur", windowFocusLost);
    };
  }, [keysPressed]);

  useEffect(() => {
    const awaitSongs = async () => {
      const songs = await getSongs();
      console.log(songs);
      const songData = getSongData(songs.hesPirate, 0);
      console.log(songData);
      playSong({
        playKey,
        stopKey,
        song: songData,
        id: songIntervalTimer,
        allKeys: allKeysRef,
      });
    };
    awaitSongs();
  }, []);

  return (
    <group {...props} dispose={null}>
      <group ref={allKeysRef}>
        <group position={[0, 0, 2.44]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key1001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 4.36]}
            onPointerDown={(e) => handlePointerDown(e, "c0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key2001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 3.39]}
            onPointerDown={(e) => handlePointerDown(e, "d0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key3001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 2.42]}
            onPointerDown={(e) => handlePointerDown(e, "e0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key4001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 1.44]}
            onPointerDown={(e) => handlePointerDown(e, "f0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key5001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 0.47]}
            onPointerDown={(e) => handlePointerDown(e, "g0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key6001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -0.5]}
            onPointerDown={(e) => handlePointerDown(e, "a0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key7001.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -1.48]}
            onPointerDown={(e) => handlePointerDown(e, "b0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack1001.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 3.97]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "c#0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack2001.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 2.79]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "d#0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack3001.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 1.12]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "f#0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack4001.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 0]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "g#0")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack5001.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, -1.15]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "a#0")}
          />
        </group>
        <group position={[0, 0, -4.36]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key1003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 4.36]}
            onPointerDown={(e) => handlePointerDown(e, "c1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key2003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 3.39]}
            onPointerDown={(e) => handlePointerDown(e, "d1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key3003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 2.42]}
            onPointerDown={(e) => handlePointerDown(e, "e1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key4003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 1.44]}
            onPointerDown={(e) => handlePointerDown(e, "f1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key5003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 0.47]}
            onPointerDown={(e) => handlePointerDown(e, "g1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key6003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -0.5]}
            onPointerDown={(e) => handlePointerDown(e, "a1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key7003.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -1.48]}
            onPointerDown={(e) => handlePointerDown(e, "b1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack1003.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 3.97]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "c#1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack2003.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 2.79]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "d#1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack3003.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 1.12]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "f#1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack4003.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 0]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "g#1")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack5003.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, -1.15]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "a#1")}
          />
        </group>
        <group position={[0, 0, -11.17]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key1002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 4.36]}
            onPointerDown={(e) => handlePointerDown(e, "c2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key2002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 3.39]}
            onPointerDown={(e) => handlePointerDown(e, "d2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key3002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 2.42]}
            onPointerDown={(e) => handlePointerDown(e, "e2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key4002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 1.44]}
            onPointerDown={(e) => handlePointerDown(e, "f2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key5002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 0.47]}
            onPointerDown={(e) => handlePointerDown(e, "g2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key6002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -0.5]}
            onPointerDown={(e) => handlePointerDown(e, "a2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key7002.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -1.48]}
            onPointerDown={(e) => handlePointerDown(e, "b2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack1002.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 3.97]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "c#2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack2002.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 2.79]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "d#2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack3002.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 1.12]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "f#2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack4002.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 0]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "g#2")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack5002.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, -1.15]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "a#2")}
          />
        </group>
        <group position={[0, 0, -17.98]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key1004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 4.36]}
            onPointerDown={(e) => handlePointerDown(e, "c3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key2004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 3.39]}
            onPointerDown={(e) => handlePointerDown(e, "d3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key3004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 2.42]}
            onPointerDown={(e) => handlePointerDown(e, "e3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key4004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 1.44]}
            onPointerDown={(e) => handlePointerDown(e, "f3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key5004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 0.47]}
            onPointerDown={(e) => handlePointerDown(e, "g3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key6004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -0.5]}
            onPointerDown={(e) => handlePointerDown(e, "a3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key7004.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -1.48]}
            onPointerDown={(e) => handlePointerDown(e, "b3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack1004.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 3.97]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "c#3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack2004.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 2.79]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "d#3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack3004.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 1.12]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "f#3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack4004.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 0]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "g#3")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack5004.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, -1.15]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "a#3")}
          />
        </group>
        <group position={[0, 0, -24.79]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key1005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 4.36]}
            onPointerDown={(e) => handlePointerDown(e, "c4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key2005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 3.39]}
            onPointerDown={(e) => handlePointerDown(e, "d4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key3005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 2.42]}
            onPointerDown={(e) => handlePointerDown(e, "e4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key4005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 1.44]}
            onPointerDown={(e) => handlePointerDown(e, "f4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key5005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, 0.47]}
            onPointerDown={(e) => handlePointerDown(e, "g4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key6005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -0.5]}
            onPointerDown={(e) => handlePointerDown(e, "a4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Key7005.geometry}
            material={materials["White Key"]}
            position={[-3.1, 0, -1.48]}
            onPointerDown={(e) => handlePointerDown(e, "b4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack1005.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 3.97]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "c#4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack2005.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 2.79]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "d#4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack3005.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 1.12]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "f#4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack4005.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, 0]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "g#4")}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.KeyBlack5005.geometry}
            material={materials["Black key"]}
            position={[-3.1, 0.59, -1.15]}
            scale={[0.65, 0.6, 0.81]}
            onPointerDown={(e) => handlePointerDown(e, "a#4")}
          />
        </group>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Logo.geometry}
        material={materials.GoldShiny}
        position={[-3.06, 1.63, -9.75]}
        rotation={[Math.PI / 2, 0.17, -Math.PI / 2]}
      >
        <meshBasicMaterial color={[255, 215, 0]} toneMapped={false} />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BackPanel.geometry}
        material={materials["Back panel"]}
        position={[-3.09, 1.63, -9.75]}
        rotation={[0, 0, -1.4]}
        scale={[1.75, 1, 16.99]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.LeftPanel.geometry}
        material={materials["Back panel"]}
        position={[-0.33, 1.25, 7.82]}
        scale={[3.51, 1.56, 0.55]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.RightPanel.geometry}
        material={materials["Back panel"]}
        position={[-0.33, 1.25, -27.32]}
        scale={[3.51, 1.56, 0.55]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Floor.geometry}
        material={materials["White Key"]}
        position={[-0.1, -0.33, -9.77]}
        scale={[3.24, 1, 17.16]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Holder.geometry}
        material={materials["Back panel"]}
        position={[-3.24, 3.03, -9.79]}
        rotation={[0, 0, -Math.PI]}
        scale={[0.11, 0.08, 14.11]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.HolderHelp1.geometry}
        material={materials.Gold}
        position={[-3.26, 2.85, 3.82]}
        scale={[0.03, 0.07, 0.35]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.HolderHelp2.geometry}
        material={materials.Gold}
        position={[-3.26, 2.85, -9.79]}
        scale={[0.03, 0.07, 1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.HolderHelp3.geometry}
        material={materials.Gold}
        position={[-3.26, 2.85, -23.36]}
        scale={[0.03, 0.07, 0.35]}
      />
    </group>
  );
};

export default PianoModel;

useGLTF.preload("/piano.glb");
